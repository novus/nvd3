// Generated by CoffeeScript 1.7.1
(function() {
  var apiTest, modelNum;

  apiTest = apiTest || {};

  apiTest.models = apiTest.models || {};

  apiTest.config = apiTest.config || {};

  modelNum = 0;

  apiTest.run = function(name, only) {
    var config, label, test;
    label = name.toFirstUpper();
    config = apiTest.config[name];
    apiTest.models[name] = (function(config) {
      return function(instance, overrides) {
        if (config.parent != null) {
          describe('Inherited API', function() {
            var pOverrides;
            pOverrides = overrides != null ? overrides.concat(config.overrides) : config.overrides;
            return apiTest.models[config.parent](instance, pOverrides);
          });
        }
        return describe("" + label + " API", function() {
          return checkProperties({
            instance: instance,
            properties: config.options,
            overrides: overrides,
            parent: config.ctor
          });
        });
      };
    })(config);
    test = only ? describe.only : describe;
    return test("" + label + " Model " + (modelNum++), function() {
      apiTest.models[name](nv.models[name]());
      if (config.submodels != null) {
        describe('Submodels', function() {
          var instance, key, model, submodels, _results;
          instance = nv.models[name]();
          submodels = config.submodels;
          _results = [];
          for (key in submodels) {
            model = submodels[key];
            _results.push(describe("" + key, function() {
              it('exists', function() {
                return should.exist(instance[key]);
              });
              return checkForDuck(instance[key], model());
            }));
          }
          return _results;
        });
      }
      if (config.inheritedInstance != null) {
        describe('Inherited instance properties', function() {
          var instance, model, props, _ref, _results;
          instance = nv.models[name]();
          _ref = config.inheritedInstance;
          _results = [];
          for (model in _ref) {
            props = _ref[model];
            _results.push(describe("from " + model, function() {
              return checkInstanceProp(instance, instance[model], props);
            }));
          }
          return _results;
        });
      }
      if (config.dispatch || config.optionsFunc) {
        return describe('Instance properties', function() {
          if (config.dispatch) {
            config.events = config.events || [];
            checkDispatch(nv.models[name], config.events);
          }
          if (config.optionsFunc) {
            return checkOptionsFunc(nv.models[name]);
          }
        });
      }
    });
  };

  apiTest.run.only = function(arg) {
    return apiTest.run(arg, true);
  };

}).call(this);
